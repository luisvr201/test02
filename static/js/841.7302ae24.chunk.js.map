{"version":3,"file":"static/js/841.7302ae24.chunk.js","mappings":"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","sources":["../node_modules/mermaid/src/diagrams/state/id-cache.js","../node_modules/mermaid/src/diagrams/state/shapes.js","../node_modules/mermaid/src/diagrams/state/stateRenderer.js","../node_modules/mermaid/src/diagrams/state/stateDiagram.ts"],"sourcesContent":["const idCache = {};\n\nexport const set = (key, val) => {\n  idCache[key] = val;\n};\n\nexport const get = (k) => idCache[k];\nexport const keys = () => Object.keys(idCache);\nexport const size = () => keys().length;\n\nexport default {\n  get,\n  set,\n  keys,\n  size,\n};\n","import { line, curveBasis } from 'd3';\nimport idCache from './id-cache.js';\nimport stateDb from './stateDb';\nimport utils from '../../utils';\nimport common from '../common/common';\nimport { getConfig } from '../../config';\nimport { log } from '../../logger';\n\n/**\n * Draws a start state as a black circle\n *\n * @param {any} g\n */\nexport const drawStartState = (g) =>\n  g\n    .append('circle')\n    // .style('stroke', 'black')\n    // .style('fill', 'black')\n    .attr('class', 'start-state')\n    .attr('r', getConfig().state.sizeUnit)\n    .attr('cx', getConfig().state.padding + getConfig().state.sizeUnit)\n    .attr('cy', getConfig().state.padding + getConfig().state.sizeUnit);\n\n/**\n * Draws a start state as a black circle\n *\n * @param {any} g\n */\nexport const drawDivider = (g) =>\n  g\n    .append('line')\n    .style('stroke', 'grey')\n    .style('stroke-dasharray', '3')\n    .attr('x1', getConfig().state.textHeight)\n    .attr('class', 'divider')\n    .attr('x2', getConfig().state.textHeight * 2)\n    .attr('y1', 0)\n    .attr('y2', 0);\n\n/**\n * Draws a an end state as a black circle\n *\n * @param {any} g\n * @param {any} stateDef\n */\nexport const drawSimpleState = (g, stateDef) => {\n  const state = g\n    .append('text')\n    .attr('x', 2 * getConfig().state.padding)\n    .attr('y', getConfig().state.textHeight + 2 * getConfig().state.padding)\n    .attr('font-size', getConfig().state.fontSize)\n    .attr('class', 'state-title')\n    .text(stateDef.id);\n\n  const classBox = state.node().getBBox();\n  g.insert('rect', ':first-child')\n    .attr('x', getConfig().state.padding)\n    .attr('y', getConfig().state.padding)\n    .attr('width', classBox.width + 2 * getConfig().state.padding)\n    .attr('height', classBox.height + 2 * getConfig().state.padding)\n    .attr('rx', getConfig().state.radius);\n\n  return state;\n};\n\n/**\n * Draws a state with descriptions\n *\n * @param {any} g The d3 svg object to add the state to\n * @param {any} stateDef\n * @returns {any} The d3 svg state\n */\nexport const drawDescrState = (g, stateDef) => {\n  const addTspan = function (textEl, txt, isFirst) {\n    const tSpan = textEl\n      .append('tspan')\n      .attr('x', 2 * getConfig().state.padding)\n      .text(txt);\n    if (!isFirst) {\n      tSpan.attr('dy', getConfig().state.textHeight);\n    }\n  };\n  const title = g\n    .append('text')\n    .attr('x', 2 * getConfig().state.padding)\n    .attr('y', getConfig().state.textHeight + 1.3 * getConfig().state.padding)\n    .attr('font-size', getConfig().state.fontSize)\n    .attr('class', 'state-title')\n    .text(stateDef.descriptions[0]);\n\n  const titleBox = title.node().getBBox();\n  const titleHeight = titleBox.height;\n\n  const description = g\n    .append('text') // text label for the x axis\n    .attr('x', getConfig().state.padding)\n    .attr(\n      'y',\n      titleHeight +\n        getConfig().state.padding * 0.4 +\n        getConfig().state.dividerMargin +\n        getConfig().state.textHeight\n    )\n    .attr('class', 'state-description');\n\n  let isFirst = true;\n  let isSecond = true;\n  stateDef.descriptions.forEach(function (descr) {\n    if (!isFirst) {\n      addTspan(description, descr, isSecond);\n      isSecond = false;\n    }\n    isFirst = false;\n  });\n\n  const descrLine = g\n    .append('line') // text label for the x axis\n    .attr('x1', getConfig().state.padding)\n    .attr('y1', getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2)\n    .attr('y2', getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2)\n    .attr('class', 'descr-divider');\n  const descrBox = description.node().getBBox();\n  const width = Math.max(descrBox.width, titleBox.width);\n\n  descrLine.attr('x2', width + 3 * getConfig().state.padding);\n  // const classBox = title.node().getBBox();\n\n  g.insert('rect', ':first-child')\n    .attr('x', getConfig().state.padding)\n    .attr('y', getConfig().state.padding)\n    .attr('width', width + 2 * getConfig().state.padding)\n    .attr('height', descrBox.height + titleHeight + 2 * getConfig().state.padding)\n    .attr('rx', getConfig().state.radius);\n\n  return g;\n};\n\n/** Adds the creates a box around the existing content and adds a panel for the id on top of the content. */\n/**\n * Function that creates an title row and a frame around a substate for a composite state diagram.\n * The function returns a new d3 svg object with updated width and height properties;\n *\n * @param {any} g The d3 svg object for the substate to framed\n * @param {any} stateDef The info about the\n * @param {any} altBkg\n */\nexport const addTitleAndBox = (g, stateDef, altBkg) => {\n  const pad = getConfig().state.padding;\n  const dblPad = 2 * getConfig().state.padding;\n  const orgBox = g.node().getBBox();\n  const orgWidth = orgBox.width;\n  const orgX = orgBox.x;\n\n  const title = g\n    .append('text')\n    .attr('x', 0)\n    .attr('y', getConfig().state.titleShift)\n    .attr('font-size', getConfig().state.fontSize)\n    .attr('class', 'state-title')\n    .text(stateDef.id);\n\n  const titleBox = title.node().getBBox();\n  const titleWidth = titleBox.width + dblPad;\n  let width = Math.max(titleWidth, orgWidth); // + dblPad;\n  if (width === orgWidth) {\n    width = width + dblPad;\n  }\n  let startX;\n  // const lineY = 1 - getConfig().state.textHeight;\n  // const descrLine = g\n  //   .append('line') // text label for the x axis\n  //   .attr('x1', 0)\n  //   .attr('y1', lineY)\n  //   .attr('y2', lineY)\n  //   .attr('class', 'descr-divider');\n\n  const graphBox = g.node().getBBox();\n  // descrLine.attr('x2', graphBox.width + getConfig().state.padding);\n\n  if (stateDef.doc) {\n    // console.warn(\n    //   stateDef.id,\n    //   'orgX: ',\n    //   orgX,\n    //   'width: ',\n    //   width,\n    //   'titleWidth: ',\n    //   titleWidth,\n    //   'orgWidth: ',\n    //   orgWidth,\n    //   'width',\n    //   width\n    // );\n  }\n\n  startX = orgX - pad;\n  if (titleWidth > orgWidth) {\n    startX = (orgWidth - width) / 2 + pad;\n  }\n  if (Math.abs(orgX - graphBox.x) < pad && titleWidth > orgWidth) {\n    startX = orgX - (titleWidth - orgWidth) / 2;\n  }\n\n  const lineY = 1 - getConfig().state.textHeight;\n  // White color\n  g.insert('rect', ':first-child')\n    .attr('x', startX)\n    .attr('y', lineY)\n    .attr('class', altBkg ? 'alt-composit' : 'composit')\n    .attr('width', width)\n    .attr(\n      'height',\n      graphBox.height + getConfig().state.textHeight + getConfig().state.titleShift + 1\n    )\n    .attr('rx', '0');\n\n  title.attr('x', startX + pad);\n  if (titleWidth <= orgWidth) {\n    title.attr('x', orgX + (width - dblPad) / 2 - titleWidth / 2 + pad);\n  }\n\n  // Title background\n  g.insert('rect', ':first-child')\n    .attr('x', startX)\n    .attr(\n      'y',\n      getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n    )\n    .attr('width', width)\n    // Just needs to be higher then the descr line, will be clipped by the white color box\n    .attr('height', getConfig().state.textHeight * 3)\n    .attr('rx', getConfig().state.radius);\n\n  // Full background\n  g.insert('rect', ':first-child')\n    .attr('x', startX)\n    .attr(\n      'y',\n      getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n    )\n    .attr('width', width)\n    .attr('height', graphBox.height + 3 + 2 * getConfig().state.textHeight)\n    .attr('rx', getConfig().state.radius);\n\n  return g;\n};\n\nconst drawEndState = (g) => {\n  g.append('circle')\n    // .style('stroke', 'black')\n    // .style('fill', 'white')\n    .attr('class', 'end-state-outer')\n    .attr('r', getConfig().state.sizeUnit + getConfig().state.miniPadding)\n    .attr(\n      'cx',\n      getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n    )\n    .attr(\n      'cy',\n      getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n    );\n\n  return (\n    g\n      .append('circle')\n      // .style('stroke', 'black')\n      // .style('fill', 'black')\n      .attr('class', 'end-state-inner')\n      .attr('r', getConfig().state.sizeUnit)\n      .attr('cx', getConfig().state.padding + getConfig().state.sizeUnit + 2)\n      .attr('cy', getConfig().state.padding + getConfig().state.sizeUnit + 2)\n  );\n};\nconst drawForkJoinState = (g, stateDef) => {\n  let width = getConfig().state.forkWidth;\n  let height = getConfig().state.forkHeight;\n\n  if (stateDef.parentId) {\n    let tmp = width;\n    width = height;\n    height = tmp;\n  }\n  return g\n    .append('rect')\n    .style('stroke', 'black')\n    .style('fill', 'black')\n    .attr('width', width)\n    .attr('height', height)\n    .attr('x', getConfig().state.padding)\n    .attr('y', getConfig().state.padding);\n};\n\nexport const drawText = function (elem, textData) {\n  // Remove and ignore br:s\n  const nText = textData.text.replace(common.lineBreakRegex, ' ');\n\n  const textElem = elem.append('text');\n  textElem.attr('x', textData.x);\n  textElem.attr('y', textData.y);\n  textElem.style('text-anchor', textData.anchor);\n  textElem.attr('fill', textData.fill);\n  if (textData.class !== undefined) {\n    textElem.attr('class', textData.class);\n  }\n\n  const span = textElem.append('tspan');\n  span.attr('x', textData.x + textData.textMargin * 2);\n  span.attr('fill', textData.fill);\n  span.text(nText);\n\n  return textElem;\n};\n\nconst _drawLongText = (_text, x, y, g) => {\n  let textHeight = 0;\n\n  const textElem = g.append('text');\n  textElem.style('text-anchor', 'start');\n  textElem.attr('class', 'noteText');\n\n  let text = _text.replace(/\\r\\n/g, '<br/>');\n  text = text.replace(/\\n/g, '<br/>');\n  const lines = text.split(common.lineBreakRegex);\n\n  let tHeight = 1.25 * getConfig().state.noteMargin;\n  for (const line of lines) {\n    const txt = line.trim();\n\n    if (txt.length > 0) {\n      const span = textElem.append('tspan');\n      span.text(txt);\n      if (tHeight === 0) {\n        const textBounds = span.node().getBBox();\n        tHeight += textBounds.height;\n      }\n      textHeight += tHeight;\n      span.attr('x', x + getConfig().state.noteMargin);\n      span.attr('y', y + textHeight + 1.25 * getConfig().state.noteMargin);\n    }\n  }\n  return { textWidth: textElem.node().getBBox().width, textHeight };\n};\n\n/**\n * Draws a note to the diagram\n *\n * @param text - The text of the given note.\n * @param g - The element the note is attached to.\n */\n\nexport const drawNote = (text, g) => {\n  g.attr('class', 'state-note');\n  const note = g.append('rect').attr('x', 0).attr('y', getConfig().state.padding);\n  const rectElem = g.append('g');\n\n  const { textWidth, textHeight } = _drawLongText(text, 0, 0, rectElem);\n  note.attr('height', textHeight + 2 * getConfig().state.noteMargin);\n  note.attr('width', textWidth + getConfig().state.noteMargin * 2);\n\n  return note;\n};\n\n/**\n * Starting point for drawing a state. The function finds out the specifics about the state and\n * renders with appropriate function.\n *\n * @param {any} elem\n * @param {any} stateDef\n */\n\nexport const drawState = function (elem, stateDef) {\n  const id = stateDef.id;\n  const stateInfo = {\n    id: id,\n    label: stateDef.id,\n    width: 0,\n    height: 0,\n  };\n\n  const g = elem.append('g').attr('id', id).attr('class', 'stateGroup');\n\n  if (stateDef.type === 'start') {\n    drawStartState(g);\n  }\n  if (stateDef.type === 'end') {\n    drawEndState(g);\n  }\n  if (stateDef.type === 'fork' || stateDef.type === 'join') {\n    drawForkJoinState(g, stateDef);\n  }\n  if (stateDef.type === 'note') {\n    drawNote(stateDef.note.text, g);\n  }\n  if (stateDef.type === 'divider') {\n    drawDivider(g);\n  }\n  if (stateDef.type === 'default' && stateDef.descriptions.length === 0) {\n    drawSimpleState(g, stateDef);\n  }\n  if (stateDef.type === 'default' && stateDef.descriptions.length > 0) {\n    drawDescrState(g, stateDef);\n  }\n\n  const stateBox = g.node().getBBox();\n  stateInfo.width = stateBox.width + 2 * getConfig().state.padding;\n  stateInfo.height = stateBox.height + 2 * getConfig().state.padding;\n\n  idCache.set(id, stateInfo);\n  // stateCnt++;\n  return stateInfo;\n};\n\nlet edgeCount = 0;\nexport const drawEdge = function (elem, path, relation) {\n  const getRelationType = function (type) {\n    switch (type) {\n      case stateDb.relationType.AGGREGATION:\n        return 'aggregation';\n      case stateDb.relationType.EXTENSION:\n        return 'extension';\n      case stateDb.relationType.COMPOSITION:\n        return 'composition';\n      case stateDb.relationType.DEPENDENCY:\n        return 'dependency';\n    }\n  };\n\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n\n  // The data for our line\n  const lineData = path.points;\n\n  // This is the accessor function we talked about above\n  const lineFunction = line()\n    .x(function (d) {\n      return d.x;\n    })\n    .y(function (d) {\n      return d.y;\n    })\n    .curve(curveBasis);\n\n  const svgPath = elem\n    .append('path')\n    .attr('d', lineFunction(lineData))\n    .attr('id', 'edge' + edgeCount)\n    .attr('class', 'transition');\n  let url = '';\n  if (getConfig().state.arrowMarkerAbsolute) {\n    url =\n      window.location.protocol +\n      '//' +\n      window.location.host +\n      window.location.pathname +\n      window.location.search;\n    url = url.replace(/\\(/g, '\\\\(');\n    url = url.replace(/\\)/g, '\\\\)');\n  }\n\n  svgPath.attr(\n    'marker-end',\n    'url(' + url + '#' + getRelationType(stateDb.relationType.DEPENDENCY) + 'End' + ')'\n  );\n\n  if (relation.title !== undefined) {\n    const label = elem.append('g').attr('class', 'stateLabel');\n\n    const { x, y } = utils.calcLabelPosition(path.points);\n\n    const rows = common.getRows(relation.title);\n\n    let titleHeight = 0;\n    const titleRows = [];\n    let maxWidth = 0;\n    let minX = 0;\n\n    for (let i = 0; i <= rows.length; i++) {\n      const title = label\n        .append('text')\n        .attr('text-anchor', 'middle')\n        .text(rows[i])\n        .attr('x', x)\n        .attr('y', y + titleHeight);\n\n      const boundstmp = title.node().getBBox();\n      maxWidth = Math.max(maxWidth, boundstmp.width);\n      minX = Math.min(minX, boundstmp.x);\n\n      log.info(boundstmp.x, x, y + titleHeight);\n\n      if (titleHeight === 0) {\n        const titleBox = title.node().getBBox();\n        titleHeight = titleBox.height;\n        log.info('Title height', titleHeight, y);\n      }\n      titleRows.push(title);\n    }\n\n    let boxHeight = titleHeight * rows.length;\n    if (rows.length > 1) {\n      const heightAdj = (rows.length - 1) * titleHeight * 0.5;\n\n      titleRows.forEach((title, i) => title.attr('y', y + i * titleHeight - heightAdj));\n      boxHeight = titleHeight * rows.length;\n    }\n\n    const bounds = label.node().getBBox();\n\n    label\n      .insert('rect', ':first-child')\n      .attr('class', 'box')\n      .attr('x', x - maxWidth / 2 - getConfig().state.padding / 2)\n      .attr('y', y - boxHeight / 2 - getConfig().state.padding / 2 - 3.5)\n      .attr('width', maxWidth + getConfig().state.padding)\n      .attr('height', boxHeight + getConfig().state.padding);\n\n    log.info(bounds);\n\n    //label.attr('transform', '0 -' + (bounds.y / 2));\n\n    // Debug points\n    // path.points.forEach(point => {\n    //   g.append('circle')\n    //     .style('stroke', 'red')\n    //     .style('fill', 'red')\n    //     .attr('r', 1)\n    //     .attr('cx', point.x)\n    //     .attr('cy', point.y);\n    // });\n    // g.append('circle')\n    //   .style('stroke', 'blue')\n    //   .style('fill', 'blue')\n    //   .attr('r', 1)\n    //   .attr('cx', x)\n    //   .attr('cy', y);\n  }\n\n  edgeCount++;\n};\n","import { select } from 'd3';\nimport { layout as dagreLayout } from 'dagre-d3-es/src/dagre/index.js';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { log } from '../../logger';\nimport common from '../common/common';\nimport { drawState, addTitleAndBox, drawEdge } from './shapes';\nimport { getConfig } from '../../config';\nimport { configureSvgSize } from '../../setupGraphViewbox';\n\n// TODO Move conf object to main conf in mermaidAPI\nlet conf;\n\nconst transformationLog = {};\n\nexport const setConf = function () {\n  //no-op\n};\n\n/**\n * Setup arrow head and define the marker. The result is appended to the svg.\n *\n * @param {any} elem\n */\nconst insertMarkers = function (elem) {\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'dependencyEnd')\n    .attr('refX', 19)\n    .attr('refY', 7)\n    .attr('markerWidth', 20)\n    .attr('markerHeight', 28)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 19,7 L9,13 L14,7 L9,1 Z');\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param {any} text\n * @param {any} id\n * @param _version\n * @param diagObj\n */\nexport const draw = function (text, id, _version, diagObj) {\n  conf = getConfig().state;\n  const securityLevel = getConfig().securityLevel;\n  // Handle root and Document for when rendering in sandbox mode\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  const doc = securityLevel === 'sandbox' ? sandboxElement.nodes()[0].contentDocument : document;\n\n  // diagObj.db.clear();\n  // parser.parse(text);\n  log.debug('Rendering diagram ' + text);\n\n  // Fetch the default direction, use TD if none was found\n  const diagram = root.select(`[id='${id}']`);\n  insertMarkers(diagram);\n\n  // Layout graph, Create a new directed graph\n  const graph = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n    // acyclicer: 'greedy',\n    rankdir: 'RL',\n    // ranksep: '20'\n  });\n\n  // Default to assigning a new object as a label for each new edge.\n  graph.setDefaultEdgeLabel(function () {\n    return {};\n  });\n\n  const rootDoc = diagObj.db.getRootDoc();\n  renderDoc(rootDoc, diagram, undefined, false, root, doc, diagObj);\n\n  const padding = conf.padding;\n  const bounds = diagram.node().getBBox();\n\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n\n  // zoom in a bit\n  const svgWidth = width * 1.75;\n  configureSvgSize(diagram, height, svgWidth, conf.useMaxWidth);\n\n  diagram.attr(\n    'viewBox',\n    `${bounds.x - conf.padding}  ${bounds.y - conf.padding} ` + width + ' ' + height\n  );\n};\nconst getLabelWidth = (text) => {\n  return text ? text.length * conf.fontSizeFactor : 1;\n};\n\nconst renderDoc = (doc, diagram, parentId, altBkg, root, domDocument, diagObj) => {\n  // Layout graph, Create a new directed graph\n  const graph = new graphlib.Graph({\n    compound: true,\n    multigraph: true,\n  });\n\n  let i;\n  let edgeFreeDoc = true;\n  for (i = 0; i < doc.length; i++) {\n    if (doc[i].stmt === 'relation') {\n      edgeFreeDoc = false;\n      break;\n    }\n  }\n\n  // Set an object for the graph label\n  if (parentId) {\n    graph.setGraph({\n      rankdir: 'LR',\n      multigraph: true,\n      compound: true,\n      // acyclicer: 'greedy',\n      ranker: 'tight-tree',\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      isMultiGraph: true,\n      // ranksep: 5,\n      // nodesep: 1\n    });\n  } else {\n    graph.setGraph({\n      rankdir: 'TB',\n      multigraph: true,\n      compound: true,\n      // isCompound: true,\n      // acyclicer: 'greedy',\n      // ranker: 'longest-path'\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      ranker: 'tight-tree',\n      // ranker: 'network-simplex'\n      isMultiGraph: true,\n    });\n  }\n\n  // Default to assigning a new object as a label for each new edge.\n  graph.setDefaultEdgeLabel(function () {\n    return {};\n  });\n\n  diagObj.db.extract(doc);\n  const states = diagObj.db.getStates();\n  const relations = diagObj.db.getRelations();\n\n  const keys = Object.keys(states);\n\n  let first = true;\n\n  for (const key of keys) {\n    const stateDef = states[key];\n\n    if (parentId) {\n      stateDef.parentId = parentId;\n    }\n\n    let node;\n    if (stateDef.doc) {\n      let sub = diagram.append('g').attr('id', stateDef.id).attr('class', 'stateGroup');\n      node = renderDoc(stateDef.doc, sub, stateDef.id, !altBkg, root, domDocument, diagObj);\n\n      if (first) {\n        // first = false;\n        sub = addTitleAndBox(sub, stateDef, altBkg);\n        let boxBounds = sub.node().getBBox();\n        node.width = boxBounds.width;\n        node.height = boxBounds.height + conf.padding / 2;\n        transformationLog[stateDef.id] = { y: conf.compositTitleSize };\n      } else {\n        // sub = addIdAndBox(sub, stateDef);\n        let boxBounds = sub.node().getBBox();\n        node.width = boxBounds.width;\n        node.height = boxBounds.height;\n        // transformationLog[stateDef.id] = { y: conf.compositTitleSize };\n      }\n    } else {\n      node = drawState(diagram, stateDef, graph);\n    }\n\n    if (stateDef.note) {\n      // Draw note note\n      const noteDef = {\n        descriptions: [],\n        id: stateDef.id + '-note',\n        note: stateDef.note,\n        type: 'note',\n      };\n      const note = drawState(diagram, noteDef, graph);\n\n      // graph.setNode(node.id, node);\n      if (stateDef.note.position === 'left of') {\n        graph.setNode(node.id + '-note', note);\n        graph.setNode(node.id, node);\n      } else {\n        graph.setNode(node.id, node);\n        graph.setNode(node.id + '-note', note);\n      }\n      // graph.setNode(node.id);\n      graph.setParent(node.id, node.id + '-group');\n      graph.setParent(node.id + '-note', node.id + '-group');\n    } else {\n      // Add nodes to the graph. The first argument is the node id. The second is\n      // metadata about the node. In this case we're going to add labels to each of\n      // our nodes.\n      graph.setNode(node.id, node);\n    }\n  }\n\n  log.debug('Count=', graph.nodeCount(), graph);\n  let cnt = 0;\n  relations.forEach(function (relation) {\n    cnt++;\n    log.debug('Setting edge', relation);\n    graph.setEdge(\n      relation.id1,\n      relation.id2,\n      {\n        relation: relation,\n        width: getLabelWidth(relation.title),\n        height: conf.labelHeight * common.getRows(relation.title).length,\n        labelpos: 'c',\n      },\n      'id' + cnt\n    );\n  });\n\n  dagreLayout(graph);\n\n  log.debug('Graph after layout', graph.nodes());\n  const svgElem = diagram.node();\n\n  graph.nodes().forEach(function (v) {\n    if (v !== undefined && graph.node(v) !== undefined) {\n      log.warn('Node ' + v + ': ' + JSON.stringify(graph.node(v)));\n      root\n        .select('#' + svgElem.id + ' #' + v)\n        .attr(\n          'transform',\n          'translate(' +\n            (graph.node(v).x - graph.node(v).width / 2) +\n            ',' +\n            (graph.node(v).y +\n              (transformationLog[v] ? transformationLog[v].y : 0) -\n              graph.node(v).height / 2) +\n            ' )'\n        );\n      root\n        .select('#' + svgElem.id + ' #' + v)\n        .attr('data-x-shift', graph.node(v).x - graph.node(v).width / 2);\n      const dividers = domDocument.querySelectorAll('#' + svgElem.id + ' #' + v + ' .divider');\n      dividers.forEach((divider) => {\n        const parent = divider.parentElement;\n        let pWidth = 0;\n        let pShift = 0;\n        if (parent) {\n          if (parent.parentElement) {\n            pWidth = parent.parentElement.getBBox().width;\n          }\n          pShift = parseInt(parent.getAttribute('data-x-shift'), 10);\n          if (Number.isNaN(pShift)) {\n            pShift = 0;\n          }\n        }\n        divider.setAttribute('x1', 0 - pShift + 8);\n        divider.setAttribute('x2', pWidth - pShift - 8);\n      });\n    } else {\n      log.debug('No Node ' + v + ': ' + JSON.stringify(graph.node(v)));\n    }\n  });\n\n  let stateBox = svgElem.getBBox();\n\n  graph.edges().forEach(function (e) {\n    if (e !== undefined && graph.edge(e) !== undefined) {\n      log.debug('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(graph.edge(e)));\n      drawEdge(diagram, graph.edge(e), graph.edge(e).relation);\n    }\n  });\n\n  stateBox = svgElem.getBBox();\n\n  const stateInfo = {\n    id: parentId ? parentId : 'root',\n    label: parentId ? parentId : 'root',\n    width: 0,\n    height: 0,\n  };\n\n  stateInfo.width = stateBox.width + 2 * conf.padding;\n  stateInfo.height = stateBox.height + 2 * conf.padding;\n\n  log.debug('Doc rendered', stateInfo, graph);\n  return stateInfo;\n};\n\nexport default {\n  setConf,\n  draw,\n};\n","import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/stateDiagram';\nimport db from './stateDb';\nimport styles from './styles';\nimport renderer from './stateRenderer';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  },\n};\n"],"names":["idCache","idCache$1","set","key","val","drawDescrState","g","stateDef","titleBox","append","attr","getConfig","state","padding","textHeight","fontSize","text","descriptions","node","getBBox","titleHeight","height","description","dividerMargin","isFirst","isSecond","forEach","descr","textEl","txt","isFirst2","tSpan","addTspan","descrLine","descrBox","width","Math","max","insert","radius","addTitleAndBox","altBkg","pad","dblPad","orgBox","orgWidth","orgX","x","title","titleShift","id","titleWidth","startX","graphBox","doc","abs","lineY","drawNote","note","rectElem","textWidth","_drawLongText","_text","y","textElem","style","replace","lines","split","common","lineBreakRegex","tHeight","noteMargin","line2","trim","length","span","drawState","elem","stateInfo","label","type","sizeUnit","drawStartState","miniPadding","drawEndState","drawForkJoinState","forkWidth","forkHeight","parentId","tmp","drawDivider","drawSimpleState","classBox","stateBox","edgeCount","conf","transformationLog","renderDoc","diagram2","root","domDocument","diagObj","graph","graphlib","compound","multigraph","i","edgeFreeDoc","stmt","setGraph","rankdir","ranker","ranksep","edgeLengthFactor","nodeSep","isMultiGraph","setDefaultEdgeLabel","db","extract","states","getStates","relations","getRelations","keys2","Object","keys","sub","boxBounds","compositTitleSize","noteDef","position","setNode","setParent","log","debug","nodeCount","cnt","relation","setEdge","id1","id2","fontSizeFactor","labelHeight","getRows","labelpos","layout","nodes","svgElem","v","warn","JSON","stringify","select","querySelectorAll","divider","parent","parentElement","pWidth","pShift","parseInt","getAttribute","Number","isNaN","setAttribute","edges","e","edge","w","path","points","filter","p","lineData","lineFunction","line","d","curve","curveBasis","svgPath","url","arrowMarkerAbsolute","window","location","protocol","host","pathname","search","relationType","AGGREGATION","EXTENSION","COMPOSITION","DEPENDENCY","getRelationType","utils","calcLabelPosition","rows","titleRows","maxWidth","minX","boundstmp","min","info","push","boxHeight","heightAdj","bounds","drawEdge","renderer","setConf","draw","_version","securityLevel","sandboxElement","contentDocument","body","document","concat","rootDoc","getRootDoc","svgWidth","configureSvgSize","useMaxWidth","diagram","parser","styles","s","init","cnf","clear"],"sourceRoot":""}